#!/usr/bin/env python3

from datetime import datetime
import os
import numpy as np

form='Dynamic'

import GlobalVariables.Settings as gvS
gvS.PlotDirectory = f'../../Codes/thornado/SandBox/AMReX/Applications/\
{form}TOV_XCFC/'
gvS.Verbose = True
from GlobalVariables.Units   import SetSpaceTimeUnits

from Utilities.Files             import GetFileNumberArray
from Utilities.MakeDataDirectory import MakeProblemDataDirectory

def getDensityDecades( ID, suffix ):

    idSuffix = ''

    plotfileDirectory \
      = gvS.PlotDirectory + '{:}/'.format( ID )

    ID += idSuffix

    plotfileBaseName = ID + '.plt'

    dataDirectory = '.{:}{:}/'.format( ID, suffix )

    SSi = -1
    SSf = -1
    nSS = -1

    SetSpaceTimeUnits( 'spherical', True )

    plotfileArray \
      = GetFileNumberArray \
          ( plotfileDirectory,\
            plotfileBaseName,\
            SSi, SSf, \
            1 )

    MakeProblemDataDirectory( plotfileArray, \
                              plotfileDirectory,   \
                              plotfileBaseName,    \
                              'PF_D',      \
                              dataDirectory,   \
                              'AMReX'     )

    MakeProblemDataDirectory( plotfileArray, \
                              plotfileDirectory,   \
                              plotfileBaseName,    \
                              'GF_SqrtGm',      \
                              dataDirectory,   \
                              'AMReX'     )

    if SSi == -1: SSi = 0
    if SSf == -1: SSf = plotfileArray.shape[0]-1
    if nSS == -1: nSS = plotfileArray.shape[0]

    SS = np.linspace( SSi, SSf, nSS, dtype = np.int64 )

    time    = np.empty( nSS )
    density = np.empty( nSS )
    for iSS in range( nSS ):

        if iSS % 10 == 0:
          print( '\r  {:}/{:}'.format( iSS, nSS ), end = '\r' )

        fileDirectory = dataDirectory + str( plotfileArray[SS[iSS]] ) + '/'

        timeFile   = fileDirectory + '{:}.dat'.format( 'Time' )
        dataFile   = fileDirectory + '{:}.dat'.format( 'PF_D'  )
        rFile      = fileDirectory + '{:}.dat'.format( 'X1'  )
        drFile     = fileDirectory + '{:}.dat'.format( 'dX1'  )
        SqrtGmFile = fileDirectory + '{:}.dat'.format( 'GF_SqrtGm' )

        rho    = np.loadtxt( dataFile   )
        r      = np.loadtxt( rFile      )
        dr     = np.loadtxt( drFile     )
        SqrtGm = np.loadtxt( SqrtGmFile )

        vol  = 0.0
        rhoK = 0.0

        for iX1 in range( r.shape[0] ):

            if ( r[iX1] + 0.5 * dr[iX1] <= 1.0 ) :

                vol  += dr[iX1] * SqrtGm[iX1]
                rhoK += dr[iX1] * SqrtGm[iX1] * rho[iX1]

        density[iSS] = rhoK / vol
        time   [iSS] = np.loadtxt( timeFile )

    print()

    filename = '{:}_CentralDensityVersusTime.dat'.format( ID )
    header = '{:}\nGenerated by {:}\non {:}\ntime [ms], rhoC [g/cc]' \
             .format( filename, __file__, datetime.today() )

    np.savetxt( filename, np.vstack( ( time, density ) ), header = header )

    print( '\n  Generated {:}'.format( filename ) )

if __name__ == '__main__':

    suffix = ''

    ID = [ f'{form}TOV_nN02_nX016_NoSL', \
           f'{form}TOV_nN02_nX032_NoSL', \
           f'{form}TOV_nN02_nX048_NoSL', \
           f'{form}TOV_nN02_nX064_NoSL', \
           f'{form}TOV_nN03_nX016_NoSL', \
           f'{form}TOV_nN03_nX032_NoSL', \
           f'{form}TOV_nN03_nX048_NoSL', \
           f'{form}TOV_nN03_nX064_NoSL' ]
    ID = [ f'{form}TOV_nN03_nX032' ]

    for i in ID:
        getDensityDecades( i, suffix )

    import os
    os.system( 'rm -rf __pycache__' )
